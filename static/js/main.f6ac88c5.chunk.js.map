{"version":3,"sources":["ScheduleComponent.tsx/schedule.module.css","helper/helper.module.css","app.module.css","TripComponent/trip.module.css","helper/helper.ts","TripComponent/TripComponent.tsx","ScheduleComponent.tsx/ScheduleComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","canAddTrip","trip","trips","every","curTrip","endTime","startTime","formatTime","minutes","minutePart","paddedHour","Math","floor","toString","padStart","paddedMinute","generateBusId","_","uniqueId","reassignDriver","newDriver","driver","removeTrip","removedTrip","bus","filter","id","TripComponent","selected","onSelect","onClick","useCallback","event","stopPropagation","className","style","key","borderColor","left","width","ScheduleComponent","buses","selectedTrip","onSelectTrip","onSelectExistingBus","onSelectNewBus","header","colSpan","xAxis","range","map","hour","newBus","canAdd","helper","smallPadding","tripDisplay","schedule","index","addTripClassname","cannotAdd","isEven","dottedLineComponent","roadLine","rowClassName","classNames","asphalt","min","max","formattedStartTime","formattedEndTime","App","useState","setBuses","setSelectedTrip","newTrip","moveTripToExistingBus","destinationBus","newBuses","updatedTrip","length","moveTripToNewBus","newBusId","push","useEffect","fetch","then","response","json","data","tripData","initialBuses","app","content","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f6ac88c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"schedule\":\"schedule_schedule__1j-Iw\",\"xAxis\":\"schedule_xAxis__1YbO1\",\"hour\":\"schedule_hour__3hrj9\",\"canAdd\":\"schedule_canAdd__1PCFT\",\"cannotAdd\":\"schedule_cannotAdd__3GpAn\",\"tripDisplay\":\"schedule_tripDisplay__2m3nV\",\"asphalt\":\"schedule_asphalt__2H-Qk\",\"roadLine\":\"schedule_roadLine__2a36l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"smallPadding\":\"helper_smallPadding__2OURO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__cewju\",\"content\":\"app_content__ckDFI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"trip\":\"trip_trip__3_Wfw\",\"shrink\":\"trip_shrink__2ve1o\",\"exhaust\":\"trip_exhaust__2VBi2\"};","import _ from \"lodash\";\nimport { Bus, BusId, Trip } from \"./dataClasses\";\n\nconst MINUTES_PER_HOUR = 60;\n\nexport function canAddTrip(trip: Trip, trips: Trip[]): boolean {\n    return trips.every((curTrip: Trip) => {\n      return trip.endTime <= curTrip.startTime || trip.startTime >= curTrip.endTime;\n    });\n  }\n\nexport function formatTime(minutes: number) {\n  const hourPart = Math.floor(minutes / MINUTES_PER_HOUR);\n  const minutePart = minutes % MINUTES_PER_HOUR;\n  const paddedHour = hourPart.toString().padStart(2, \"0\");\n  const paddedMinute = minutePart.toString().padStart(2, \"0\");\n  return `${paddedHour}:${paddedMinute}`;\n}\n\nexport function formatHour(hours: number) {\n  return formatTime(hours * MINUTES_PER_HOUR);\n}\n\nexport function generateBusId(): BusId {\n    return _.uniqueId();\n}\n\nexport function reassignDriver(trip: Trip, newDriver: BusId): Trip {\n  return {\n    ...trip,\n    driver: newDriver,\n  };\n}\n\nexport function removeTrip(removedTrip: Trip, bus: Bus): Bus {\n  return {\n    ...bus,\n    trips: bus.trips.filter((trip) => trip.id !== removedTrip.id),\n  };\n}\n","import React, { FunctionComponent, useCallback } from \"react\";\nimport { Trip, TripId } from \"../helper/dataClasses\";\n\nimport style from \"./trip.module.css\";\n\ninterface Props {\n    trip: Trip;\n    selected: boolean;\n    onSelect: (newSelection: Trip) => void;\n}\n\nexport const TripComponent: FunctionComponent<Props> = ({trip, selected, onSelect}) => {\n\n    const onClick = useCallback((event) => {\n        // Don't trigger the onClick event for the parent\n        event.stopPropagation();\n        onSelect(trip);\n    }, [trip, onSelect]);\n\n    return (\n        <div\n            className={style.trip}\n            key={trip.id}\n            style={{\n                borderColor: selected ? \"blue\" : \"black\",\n                // One pixel per minute\n                left: trip.startTime,\n                width: trip.endTime - trip.startTime,\n            }}\n            onClick={onClick}\n        >\n            {trip.id}\n        </div>\n    );\n};","import classNames from \"classnames\";\nimport _ from \"lodash\";\nimport React, { FunctionComponent } from \"react\";\nimport { Bus, Trip } from \"../helper/dataClasses\";\nimport { canAddTrip, formatHour, formatTime } from \"../helper/helper\";\nimport { TripComponent } from \"../TripComponent/TripComponent\";\nimport style from \"./schedule.module.css\";\nimport helper from \"../helper/helper.module.css\";\n\nexport const NEW_BUS_ID = \"New Bus\";\nconst maximumHours = 12;\n\ninterface Props {\n    buses: Bus[];\n    selectedTrip: Trip | null;\n    onSelectTrip: (newTrip: Trip) => void;\n    onSelectExistingBus: (selectedBus: Bus) => void;\n    onSelectNewBus: () => void;\n}\n\nexport const ScheduleComponent: FunctionComponent<Props> = ({\n    buses,\n    selectedTrip,\n    onSelectTrip,\n    onSelectExistingBus,\n    onSelectNewBus,\n}) => {\n\n    const header = (\n        <thead>\n            <td colSpan={2}/>\n            <td className={style.xAxis}>\n                {_.range(maximumHours).map(hour => (\n                    <div className={style.hour}>\n                        {formatHour(hour)}\n                    </div>\n                ))}\n            </td>\n        </thead>\n    );\n\n    // A dummy row to add a new bus. Superficially resembles the main rows\n    const newBus = (\n        (\n            <tr className={style.canAdd}>\n                <td colSpan={2}\n                    className={helper.smallPadding}>\n                    {\"New Bus\"}\n                </td>\n                <td\n                    className={style.tripDisplay}\n                    onClick={onSelectNewBus}\n                />\n            </tr>\n        )\n    );\n\n    return (\n        <table className={style.schedule}>\n            {header}\n            <tbody>\n                {buses.map(({id, trips}, index) => {\n\n                    // Style whether you can move a trip to a row\n                    let addTripClassname = \"\";\n                    // Don't mess with the styling of the source bus\n                    if (selectedTrip && selectedTrip.driver !== id) {\n                        addTripClassname = canAddTrip(selectedTrip, trips) ? style.canAdd : style.cannotAdd;\n                    }\n\n                    // Style every even row as a \"road\"\n                    const isEven = index % 2 === 0;\n                    const dottedLineComponent = isEven ? <div className={style.roadLine} /> : null;\n\n                    const rowClassName = classNames(\n                        addTripClassname, {\n                        [style.asphalt]: isEven,\n                    });\n\n                    const startTime = _.min(trips.map(trip => trip.startTime)) || 0;\n                    const endTime = _.max(trips.map(trip => trip.endTime)) || 0;\n                    const formattedStartTime = startTime ? formatTime(startTime) : \"undefined\";\n                    const formattedEndTime = endTime ? formatTime(endTime) : \"undefined\";\n\n                    return (\n                        <tr\n                            key={id}\n                            className={rowClassName}>\n                            <td className={helper.smallPadding}>{`Bus #${id}`}</td>\n                            <td className={helper.smallPadding}>{`${formattedStartTime} - ${formattedEndTime}`}</td>\n                            <td\n                                className={style.tripDisplay}\n                                onClick={() => onSelectExistingBus({ id, trips })}>\n                                {\n                                    trips.map((trip) => {\n                                        return (\n                                            <TripComponent\n                                                key={trip.id}\n                                                trip={trip}\n                                                selected={trip.id === selectedTrip?.id}\n                                                onSelect={onSelectTrip}\n                                            />\n                                        );\n                                    })\n                                }\n                                {dottedLineComponent}\n                            </td>\n                        </tr>\n                    );\n                })}\n                {selectedTrip && newBus}\n            </tbody>\n        </table>\n    );\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\n\nimport { Bus, BusId, Trip, TripData } from \"./helper/dataClasses\";\nimport { canAddTrip, generateBusId, reassignDriver, removeTrip } from \"./helper/helper\";\nimport { ScheduleComponent } from \"./ScheduleComponent.tsx/ScheduleComponent\";\n\nimport style from \"./app.module.css\";\nimport helper from \"./helper/helper.module.css\";\n\nconst NO_TRIP_SELECTED = null;\n\nconst App: React.FC = () => {\n\n  const [buses, setBuses] = useState<Bus[]>([]);\n\n  const [selectedTrip, setSelectedTrip] = useState<Trip | null>(NO_TRIP_SELECTED);\n\n  const onSelectTrip = useCallback((newTrip: Trip) => {\n    // Unselect a trip if it is clicked twice in a row\n    if (selectedTrip?.id === newTrip.id) {\n      setSelectedTrip(null);\n    } else {\n      setSelectedTrip(newTrip);\n    }\n  }, [selectedTrip]);\n\n  // Code is duplicated between moveTripToExistingBus and moveTripToNewBus\n  // However, combining the two functions is messy and would be the wrong\n  // abstraction: https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction\n  const moveTripToExistingBus = useCallback((destinationBus: Bus) => {\n    if (selectedTrip === NO_TRIP_SELECTED || !canAddTrip(selectedTrip, destinationBus.trips)) {\n      return;\n    }\n\n    const newBuses = buses\n      .map((bus) => {\n        switch (bus.id) {\n          // Delete the trip from the source bus\n          case selectedTrip.driver:\n            return removeTrip(selectedTrip, bus);\n          // Add the trip to the existing bus\n          case destinationBus.id:\n            const updatedTrip = reassignDriver(selectedTrip, destinationBus.id);\n            return {\n              ...destinationBus,\n              trips: [...destinationBus.trips, updatedTrip],\n            };\n          default:\n            return bus;\n        }\n      })\n      // Remove buses without trips\n      .filter((bus) => bus.trips.length > 0);\n\n    setBuses(newBuses);\n\n    // Unselect after moving trip\n    setSelectedTrip(NO_TRIP_SELECTED);\n  }, [selectedTrip, buses]);\n\n  const moveTripToNewBus = useCallback(() => {\n    if (selectedTrip === NO_TRIP_SELECTED) {\n      return;\n    }\n\n    // Delete the trip from the source bus\n    const newBuses = buses\n      .map((bus) => {\n        switch (bus.id) {\n          case selectedTrip.driver:\n            return removeTrip(selectedTrip, bus);\n          default:\n            return bus;\n        }\n      })\n      // Remove buses without trips\n      .filter((bus) => bus.trips.length > 0);\n\n    const newBusId: BusId = generateBusId();\n    const newBus: Bus = {\n        id: newBusId,\n        trips: [reassignDriver(selectedTrip, newBusId)],\n      };\n    newBuses.push(newBus);\n\n    setBuses(newBuses);\n\n    // Unselect after moving trip\n    setSelectedTrip(NO_TRIP_SELECTED);\n  }, [selectedTrip, buses]);\n\n  // Fetch the JSON to populate the data\n  useEffect(() => {\n    fetch(\"bus-scheduling-input.json\")\n      .then((response) => response.json())\n      .then((data) => data.map((tripData: TripData): Bus => {\n        const id = generateBusId();\n        const trip = {\n          ...tripData,\n          driver: id,\n        };\n        return { id, trips: [trip] };\n      }))\n      .then((initialBuses) => setBuses(initialBuses));\n  }, []);\n\n  return (\n    <div className={style.app}>\n      <div className={style.content}>\n        <div className={style.header} >\n          <h1>Bus Scheduling App</h1>\n          <h4>Solve NP-hard problems by hand</h4>\n        </div>\n        {buses.length > 0 ? (\n          <ScheduleComponent\n            buses={buses}\n            selectedTrip={selectedTrip}\n            onSelectTrip={onSelectTrip}\n            onSelectExistingBus={moveTripToExistingBus}\n            onSelectNewBus={moveTripToNewBus}\n          />) : <div className={helper.smallPadding}>Loading!</div>}\n        </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}